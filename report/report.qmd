---
title: "Bayesian Data Analysis Project"
bibliography: ../references.bib
author:
    - Alireza Honarvar
    - Chen Xu
    - Nathaniel
format:
  html:
    toc: true
    code-tools: true
    code-line-numbers: true
    number-sections: true
    mainfont: Georgia, serif
    page-layout: article
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
    include-in-header:
      - text: \newcommand{\rhat}{\hat{R}}
---

```{r, echo=FALSE, output=FALSE}
#| label: imports and config parameters 
library(tidyr)
library(dplyr)
library(tools)
library(ggplot2)
library(bayesplot)
library(ggdist)
library(posterior)
# library(priorsense)
library(cmdstanr)
library(brms)
library(rstan)
options(brms.backend="cmdstanr")
options(brms.file_refit="on_change")


# Set more readable themes with bigger font for plotting packages
ggplot2::theme_set(theme_minimal(base_size = 14))
bayesplot::bayesplot_theme_set(theme_minimal(base_size = 14))

# font size for plots that are displayed side by side
font_size_side_by_side = 20

# setwd("/home/alireza/Documents/studium/courses/bayesian_data_analysis/project/report")

# read data
data = read.table(
  "../data/storms.csv",
  header = TRUE,
  sep=","
)

print(head(data))


# Preprocess data
# ..change column names to be more compact
# colnames(data_orig)[c(1,2,3,5,6,7,8)] = 
  # c("year", "duration", "visitors", "price_b", "cons_b", "price_c", "cons_c")
# ..change consumption unit from hectoliters to liters and visitor unit to people
# data_orig$cons_b <- data_orig$cons_b * 100
# data_orig$visitors <- data_orig$visitors * 10^6
# ..calculate per_capita values
# data_orig$cons_cap_b <- data_orig$cons_b / (data_orig$visitors)
# data_orig$cons_cap_c <- data_orig$cons_c / (data_orig$visitors)

# data_orig$cons_cap_day_b <- data_orig$cons_cap_b / data_orig$duration
# data_orig$cons_cap_day_c <- data_orig$cons_cap_c / data_orig$duration

# data_orig$exp_cap_day_b <- data_orig$cons_cap_day_b * data_orig$price_b 
# data_orig$exp_cap_day_c <- data_orig$cons_cap_day_c * data_orig$price_c 
```

# Introduction

## Motivation

To know the behavior and traits of storms is very important especially hurricanes. For one, they are the most destructive natural calamities that ravage infrastructure, kill people and disrupt economies on a massive scale. Secondly, in line with growing anxiety about global warming it becomes more necessary to understand these storms better in terms of their inner workings and possible responses to altered surroundings. It is also true that if we have more knowledge about them we can prepare ourselves adequately against such disasters while responding appropriately when they occur too.

## Problem

We want to analyze the NOAA Atlantic hurricane dataset to get some insights on what factors (for example tropical storm and hurricane diameter) have an effect on the maximum wind speed. This analysis can provide valuable information for future cases where we can predict the intensity of a storm by its factors.

## Main modeling idea

## Illustrative figures

# Description of data and the analysis problem

The dataset used for this project is the NOAA Atlantic hurricane database best track data (HURDAT2) which contains data from 1975 to 2022. This dataset is from dplyr package in R datasets, accessed from https://vincentarelbundock.github.io/Rdatasets/datasets.html. The CSV (https://vincentarelbundock.github.io/Rdatasets/csv/dplyr/storms.csv) and DOC (https://vincentarelbundock.github.io/Rdatasets/doc/dplyr/storms.html) are also accessibly from the given links (last accessed May 6th 2024).

Our focus is the data from 2004 to 2022 since only these rows contain the diameter of the tropical storm and hurricane. As far as we researched, this case study has not been done before.

This dataset contains 19537 rows in total and 13 columns:

-   Name (name) {string}

    -   Storm Name

-   Year (year) {numeric}

-   Month (month) {numeric}

-   Day (day) {numeric}

-   Hour (hour) {numeric}

    -   Hour of report (in UTC)

-   Latitude (lat) {numeric}

    -   Latitude of storm center

-   Longitude (long) {numeric}

    -   Longitude of storm center

-   Status (status) {string}

    -   Storm classification (Tropical Depression, Tropical Storm, or Hurricane)

-   Category (category) {NA/numeric}

    -   Saffir-Simpson hurricane category calculated from wind speed. (NA: not a hurricane, 1: 64+ knots, 2: 83+ knots, 3. 96+ knots, 4: 113+ knots, 5: 137+ knots)

-   Wind (wind) {numeric}

    -   Storm's maximum sustained wind speed (in knots)

-   Pressure (pressure) {numeric}

    -   Air pressure at the storm's center (in millibars)

-   Tropical storm force diameter (tropicalstorm_force_diameter) {NA/numeric}

    -   Diameter (in nautical miles) of the area experiencing tropical storm strength winds (34 knots or above). Only available starting in 2004.

-   Hurricane force diameter (hurricane_force_diameter) {NA/numeric}

    -   Diameter (in nautical miles) of the area experiencing hurricane strength winds (64 knots or above). Only available starting in 2004.

# Description of models

# Weakly informative priors

# Stan code

# MCMC inference

# Convergence diagnostic

# Posterior predictive checks

# Predictive performance assessment

# Sensitivity analysis

# Model comparison

# Discussion of issues and potential improvements

# Conclusion and what was learned

# Self-reflection of what we learned

```{r}
# Remove rows with missing values
# data$category <- ifelse(is.na(data$category), 0, data$category)
data_complete = data
data <- data[data$year >= 2004, ]
only_stormy_data <- data[data$tropicalstorm_force_diameter > 0, ]
only_hurricane_data <- data[data$hurricane_force_diameter > 0, ]
# data = na.omit(data)
```

```{r}
# Scatter plot using ggplot2
ggplot(only_stormy_data, aes(y = wind, x = tropicalstorm_force_diameter)) +
  geom_point(alpha = 0.5, aes(color = as.factor(category))) + 
  geom_smooth(method = "lm", color = "grey", se = FALSE) +
  labs(title = "Scatter Plot of Wind vs Tropical Storm Force Diameter",
       y = "Wind (knots)",
       x = "Tropical Storm Force Diameter (nm)",
      color = "Category")  +
  #scale_x_log10() +  # Adding log scale to x-axis
  #scale_y_log10() +  # Adding log scale to y-axis
  theme_minimal()
```
```{r}
# Filter the data to include only the rows where wind is at its maximum for each diameter value
max_data <- only_stormy_data %>%
  group_by(tropicalstorm_force_diameter) %>%
  filter(wind == max(wind)) %>%
  ungroup()

# Plot the scatter plot with the fitted line for the maximum wind values
ggplot(max_data, aes(x = tropicalstorm_force_diameter, y = wind)) +
  geom_point(aes(color = as.factor(category)), alpha = 0.5) + 
  geom_smooth(method = "lm", color = "red", se = FALSE) +  # Fit line for maximum wind values
  labs(title = "Scatter Plot of Wind vs Tropical Storm Force Diameter",
       y = "ln(Max Wind)",
       x = "ln(Tropical Storm Force Diameter)") +
  theme_minimal()

```


```{r}
ggplot(only_stormy_data, aes(y = log(wind), x = log(tropicalstorm_force_diameter))) +
  geom_point(aes(color = as.factor(category)), alpha = 0.5) + 
  geom_smooth(method = "lm", color = "grey", se = FALSE) +
  labs(title = "Scatter Plot of Wind vs Tropical Storm Force Diameter",
       y = "ln(Wind)",
       x = "ln(Tropical Storm Force Diameter)",
       color = "Category") +
  #scale_x_log10() +  # Adding log scale to x-axis
  #scale_y_log10() +  # Adding log scale to y-axis
  # scale_color_discrete(labels = c("0" = "0", "1" = "1")) +  # Rename the legend labels
  theme_minimal()
```

```{r}
# Filter the data to include only the rows where wind is at its maximum for each diameter value
max_data <- only_stormy_data %>%
  group_by(tropicalstorm_force_diameter) %>%
  filter(log(wind) == max(log(wind))) %>%
  ungroup()

# Plot the scatter plot with the fitted line for the maximum wind values
ggplot(max_data, aes(x = log(tropicalstorm_force_diameter), y = log(wind))) +
  geom_point(aes(color = as.factor(category)), alpha = 0.5) + 
  geom_smooth(method = "lm", color = "red", se = FALSE) +  # Fit line for maximum wind values
  labs(title = "Scatter Plot of Wind vs Tropical Storm Force Diameter",
       y = "ln(Max Wind)",
       x = "ln(Tropical Storm Force Diameter)",
       color = "Category") +
  theme_minimal()

```

```{r}
# Scatter plot using ggplot2
ggplot(only_hurricane_data, aes(y = log(wind), x = log(hurricane_force_diameter))) +
  geom_point(alpha = 0.5, aes(color = as.factor(category))) +
  geom_smooth(method = "lm", color = "blue", se = FALSE) +
  labs(title = "Scatter Plot of Wind vs Hurricane Force Diameter",
       y = "Wind (knots)",
       x = "Hurricane Force Diameter (nm)",
       color = "Category") +
  theme_minimal()
```
```{r}
# Filter the data to include only the rows where wind is at its maximum for each diameter value
max_data <- only_hurricane_data %>%
  group_by(hurricane_force_diameter) %>%
  filter(log(wind) == max(log(wind))) %>%
  ungroup()

# Plot the scatter plot with the fitted line for the maximum wind values
ggplot(max_data, aes(x = log(hurricane_force_diameter), y = log(wind))) +
  geom_point(aes(color = as.factor(category)), alpha = 0.5) + 
  geom_smooth(method = "lm", color = "red", se = FALSE) +  # Fit line for maximum wind values
  labs(title = "Scatter Plot of Wind vs Hurricane Force Diameter",
       y = "ln(Max Wind)",
       x = "ln(Hurricane Force Diameter)",
       color = "Category") +
  theme_minimal()

```


```{r}
ggplot(only_stormy_data, aes(x = tropicalstorm_force_diameter, y = hurricane_force_diameter)) +
  geom_point(alpha = 0.5, aes(color = as.factor(category))) +
  geom_smooth(method = "lm", color = "blue", se = FALSE) +
  labs(title = "Scatter Plot of Tropical Storm vs Hurricane Force Diameter",
       x = "Tropical Storm Force Diameter (nm)",
       y = "Hurricane Force Diameter (nm)",
       color = "Category") +
  theme_minimal()
```

```{r}
ggplot(only_hurricane_data, aes(x = log(tropicalstorm_force_diameter), y = log(hurricane_force_diameter))) +
  geom_point(alpha = 0.5, aes(color = as.factor(category))) +
  geom_smooth(method = "lm", color = "blue", se = FALSE) +
  labs(title = "Scatter Plot of Tropical Storm vs Hurricane Force Diameter",
       x = "ln(Tropical Storm Force Diameter (nm))",
       y = "ln(Hurricane Force Diameter (nm))",
       color = "Category") +
  theme_minimal()
```


```{r}
ggplot(only_stormy_data, aes(x = wind)) +
  geom_histogram(binwidth = 5, aes(fill = as.factor(category)), color = "black") +  # Adjust binwidth as needed
  labs(title = "Histogram of Wind Speeds",
       x = "Wind Speed (knots)",
       y = "Frequency") +
  theme_minimal()
```
```{r}
if (requireNamespace("ggplot2", quietly = TRUE)) {
  library(ggplot2)
  data %>%
    filter(year >= 2000) %>%
    ggplot(aes(long, lat, color = paste(year, name))) +
    geom_path(show.legend = FALSE) +
    facet_wrap(~year)
}
```

```{r}
if (requireNamespace("ggplot2", quietly = TRUE)) {
  library(ggplot2)
  only_stormy_data %>%
    filter(year >= 2000) %>%
    ggplot(aes(long, lat, color = paste(year, name))) +
    geom_path(show.legend = FALSE) +
    facet_wrap(~year)
}
```

```{r}
data%>%
  group_by(category)%>%
  summarise(avgWind = mean(wind)) %>%
  ggplot(aes(x = category , y = avgWind)) +
  geom_point(aes(color = as.factor(category)), alpha = 0.5) +
  labs(x= "Category",
       y= "Average Wind Speed (in knots)",
       title = "Average Wind by Category of Storm",
       color = "Category") +
  theme_minimal()
```


```{r}
data%>%
  ggplot(aes(x=as.factor(month))) +
  geom_bar(aes(fill= as.factor(category))) +
  labs(x= "Month",
       y= "Number of Storms",
       title = "Monthly Number of All Wind Reports by Category",
       fill = "Category" ) +
  theme_minimal()
```
```{r}
data%>%
  filter(!is.na(category)) %>%
  ggplot(aes(x=as.factor(month))) +
  geom_bar(aes(fill= as.factor(category))) +
  labs(x= "Month",
       y= "Number of Storms",
       title = "Monthly Number of Storms (64+ knots) by Category",
       fill = "Category" ) +
  theme_minimal()
```
